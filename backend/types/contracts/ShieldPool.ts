/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ShieldPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeViewer"
      | "computeMyPayout"
      | "getMyEncryptedDeposit"
      | "getMyEncryptedRisk"
      | "getMyLastPayoutEncrypted"
      | "getPoolEthBalance"
      | "getPoolTotalClear"
      | "getPoolTotalEncrypted"
      | "getRiskSumEncrypted"
      | "joinPool"
      | "protocolId"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Joined" | "PayoutComputed"): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeViewer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeMyPayout",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyEncryptedDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyEncryptedRisk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyLastPayoutEncrypted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolEthBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTotalClear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTotalEncrypted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskSumEncrypted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeViewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMyPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyEncryptedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyEncryptedRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyLastPayoutEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTotalClear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTotalEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskSumEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
}

export namespace JoinedEvent {
  export type InputTuple = [user: AddressLike, valueWei: BigNumberish];
  export type OutputTuple = [user: string, valueWei: bigint];
  export interface OutputObject {
    user: string;
    valueWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutComputedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShieldPool extends BaseContract {
  connect(runner?: ContractRunner | null): ShieldPool;
  waitForDeployment(): Promise<this>;

  interface: ShieldPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeViewer: TypedContractMethod<[], [void], "nonpayable">;

  computeMyPayout: TypedContractMethod<
    [eventLossEnc: BytesLike, inputProof: BytesLike],
    [string],
    "nonpayable"
  >;

  getMyEncryptedDeposit: TypedContractMethod<[], [string], "view">;

  getMyEncryptedRisk: TypedContractMethod<[], [string], "view">;

  getMyLastPayoutEncrypted: TypedContractMethod<[], [string], "view">;

  getPoolEthBalance: TypedContractMethod<[], [bigint], "view">;

  getPoolTotalClear: TypedContractMethod<[], [bigint], "view">;

  getPoolTotalEncrypted: TypedContractMethod<[], [string], "view">;

  getRiskSumEncrypted: TypedContractMethod<[], [string], "view">;

  joinPool: TypedContractMethod<
    [amountEnc: BytesLike, riskEnc: BytesLike, inputProof: BytesLike],
    [void],
    "payable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeViewer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "computeMyPayout"
  ): TypedContractMethod<
    [eventLossEnc: BytesLike, inputProof: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMyEncryptedDeposit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMyEncryptedRisk"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMyLastPayoutEncrypted"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolEthBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolTotalClear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolTotalEncrypted"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRiskSumEncrypted"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "joinPool"
  ): TypedContractMethod<
    [amountEnc: BytesLike, riskEnc: BytesLike, inputProof: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutComputed"
  ): TypedContractEvent<
    PayoutComputedEvent.InputTuple,
    PayoutComputedEvent.OutputTuple,
    PayoutComputedEvent.OutputObject
  >;

  filters: {
    "Joined(address,uint256)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "PayoutComputed(address)": TypedContractEvent<
      PayoutComputedEvent.InputTuple,
      PayoutComputedEvent.OutputTuple,
      PayoutComputedEvent.OutputObject
    >;
    PayoutComputed: TypedContractEvent<
      PayoutComputedEvent.InputTuple,
      PayoutComputedEvent.OutputTuple,
      PayoutComputedEvent.OutputObject
    >;
  };
}
