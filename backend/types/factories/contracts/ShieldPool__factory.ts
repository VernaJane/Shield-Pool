/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ShieldPool,
  ShieldPoolInterface,
} from "../../contracts/ShieldPool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "valueWei",
        type: "uint256",
      },
    ],
    name: "Joined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "PayoutComputed",
    type: "event",
  },
  {
    inputs: [],
    name: "authorizeViewer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "externalEuint32",
        name: "eventLossEnc",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "computeMyPayout",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyEncryptedDeposit",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyEncryptedRisk",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyLastPayoutEncrypted",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolTotalClear",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolTotalEncrypted",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRiskSumEncrypted",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "externalEuint32",
        name: "amountEnc",
        type: "bytes32",
      },
      {
        internalType: "externalEuint32",
        name: "riskEnc",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "joinPool",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b5061018a6100ae604080516080810182525f80825260208201819052918101829052606081019190915250604080516080810182527350157cffd6bbfa2dece204a89ec419c23ef5755d815273cd3ab3bd6bcc0c0bf3e27912a92043e817b1cf69602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b610ca5806101975f395ff3fe6080604052600436106100b8575f3560e01c8063bfb9721511610071578063da1f12ab1161004c578063da1f12ab1461019d578063ded8456d146101b1578063fc3ebfbb146101c5575f5ffd5b8063bfb9721514610155578063c2d5c26b14610175578063caef383814610189575f5ffd5b8063464213c2116100a1578063464213c2146100fd5780635facdf1f146101125780636467fe1914610131575f5ffd5b8063134d6052146100bc57806335474dbb146100dd575b5f5ffd5b3480156100c7575f5ffd5b50475b6040519081526020015b60405180910390f35b3480156100e8575f5ffd5b50335f908152600260205260409020546100ca565b61011061010b366004610b1e565b6101e5565b005b34801561011d575f5ffd5b506100ca61012c366004610b6d565b610456565b34801561013c575f5ffd5b5060055460405163ffffffff90911681526020016100d4565b348015610160575f5ffd5b50335f908152600160205260409020546100ca565b348015610180575f5ffd5b50610110610559565b348015610194575f5ffd5b506004546100ca565b3480156101a8575f5ffd5b506127116100ca565b3480156101bc575f5ffd5b506003546100ca565b3480156101d0575f5ffd5b50335f908152602081905260409020546100ca565b5f34116102385760405162461bcd60e51b815260206004820152600660248201527f6e6f2d6574680000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b5f6102788584848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061057592505050565b90505f6102ba8585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061057592505050565b335f908152602081905260409020549091506102d6908361058b565b335f908152602081815260408083209390935560019052208190556003546102fe908361058b565b60035560045461030e908261058b565b6004555f610322655af3107a400034610bb5565b905063ffffffff811115610337575063ffffffff5b600580548291905f9061035190849063ffffffff16610bd4565b92506101000a81548163ffffffff021916908363ffffffff16021790555061039a5f5f336001600160a01b03166001600160a01b031681526020019081526020015f20546105b9565b50335f818152602081905260409020546103b3916105c8565b50335f908152600160205260409020546103cc906105b9565b50335f818152600160205260409020546103e5916105c8565b506103f16003546105b9565b506103fe600354336105c8565b5061040a6004546105b9565b50610417600454336105c8565b5060405134815233907f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d9060200160405180910390a250505050505050565b5f5f6104978585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061057592505050565b335f90815260208190526040812054919250906104b490836105da565b6005549091505f9063ffffffff1681036104d8576104d15f610608565b90506104ef565b6005546104ec90839063ffffffff1661061a565b90505b335f908152600260205260409020819055610509816105b9565b50335f81815260026020526040902054610522916105c8565b5060405133907ffabf4416362dc97c10fb03ce8575f22233c2ff87c42c0949335ac81c02385192905f90a2925050505b9392505050565b610565600354336105c8565b50610572600454336105c8565b50565b5f6105828383600461063c565b90505b92915050565b5f8261059d5761059a5f610608565b92505b816105ae576105ab5f610608565b91505b61058283835f61075c565b5f6105c4823061083f565b5090565b5f6105d3838361083f565b5090919050565b5f826105ec576105e95f610608565b92505b816105fd576105fa5f610608565b91505b61058283835f6108c8565b5f6105858263ffffffff166004610965565b5f8261062c576106295f610608565b92505b6105828363ffffffff8416610a22565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b906106b5908890339089908990600401610c1c565b6020604051808303815f875af11580156106d1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106f59190610c6d565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b15801561073e575f5ffd5b505af1158015610750573d5f5f3e3d5ffd5b50505050509392505050565b5f5f821561076f5750600160f81b610772565b505f5b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163022f65e760e31b815260048101879052602481018690526001600160f81b0319831660448201527f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b03169063117b2f38906064015b6020604051808303815f875af1158015610811573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108359190610c6d565b9695505050505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b1580156108ad575f5ffd5b505af11580156108bf573d5f5f3e3d5ffd5b50505050505050565b5f5f82156108db5750600160f81b6108de565b505f5b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051630afe14ad60e31b815260048101879052602481018690526001600160f81b0319831660448201527f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0316906357f0a568906064016107f5565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb906109da9087908790600401610c84565b6020604051808303815f875af11580156109f6573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a1a9190610c6d565b949350505050565b5f600160f81b817f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497006001810154604051635a53accb60e01b815260048101889052602481018790526001600160f81b0319851660448201529192506001600160a01b031690635a53accb906064016020604051808303815f875af1158015610aac573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ad09190610c6d565b95945050505050565b5f5f83601f840112610ae9575f5ffd5b50813567ffffffffffffffff811115610b00575f5ffd5b602083019150836020828501011115610b17575f5ffd5b9250929050565b5f5f5f5f60608587031215610b31575f5ffd5b8435935060208501359250604085013567ffffffffffffffff811115610b55575f5ffd5b610b6187828801610ad9565b95989497509550505050565b5f5f5f60408486031215610b7f575f5ffd5b83359250602084013567ffffffffffffffff811115610b9c575f5ffd5b610ba886828701610ad9565b9497909650939450505050565b5f82610bcf57634e487b7160e01b5f52601260045260245ffd5b500490565b63ffffffff818116838216019081111561058557634e487b7160e01b5f52601160045260245ffd5b60548110610c1857634e487b7160e01b5f52602160045260245ffd5b9052565b8481526001600160a01b0384166020820152608060408201525f8351806080840152806020860160a085015e5f60a0828501015260a0601f19601f830116840101915050610ad06060830184610bfc565b5f60208284031215610c7d575f5ffd5b5051919050565b828152604081016105526020830184610bfc56fea164736f6c634300081b000a";

type ShieldPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShieldPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShieldPool__factory extends ContractFactory {
  constructor(...args: ShieldPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ShieldPool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ShieldPool__factory {
    return super.connect(runner) as ShieldPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShieldPoolInterface {
    return new Interface(_abi) as ShieldPoolInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ShieldPool {
    return new Contract(address, _abi, runner) as unknown as ShieldPool;
  }
}
